Microsoft (R) Macro Assembler Version 12.00.30501.0	    10/12/14 22:10:08
Assignment1    (AS1.asm				     Page 1 - 1


				TITLE Assignment1    (AS1.asm)

				; Author:tatyana vlaskin

				; Course / Project ID                 Date:10.11.2014
				; Description:
				; Write and test a MASM program to perform the following tasks:
				; 1. Display your name and program title on the output screen.
				; 2. Display instructions for the user.
				; 3. Prompt the user to enter two numbers.
				; 4. Calculate the sum, difference, product, (integer) quotient and remainder of the numbers.
				; 5. Display a terminating message
				; NOTE: You are not required to handle negative input or negative results.
				; Extra-credit options(original definition must be fulfilled):
				; 1.Repeat until the user chooses to quit.
				; 2.Validate the second number to be less than the first.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 41 73 73 69 67	Introduction	BYTE		"Assignment 1: Elementary Arithmetic by Tatyana Vlaskin", 0				;displays program title and my name
	   6E 6D 65 6E 74
	   20 31 3A 20 45
	   6C 65 6D 65 6E
	   74 61 72 79 20
	   41 72 69 74 68
	   6D 65 74 69 63
	   20 62 79 20 54
	   61 74 79 61 6E
	   61 20 56 6C 61
	   73 6B 69 6E 00
 00000037 45 6E 74 65 72	Message1		BYTE		"Enter 2 numbers, and Ill show you the sum, "
	   20 32 20 6E 75
	   6D 62 65 72 73
	   2C 20 61 6E 64
	   20 49 6C 6C 20
	   73 68 6F 77 20
	   79 6F 75 20 74
	   68 65 20 73 75
	   6D 2C 20
 00000062  20 64 69 66 66					BYTE		" difference,", 10, "product, quotient, and remainder. ", 0				; 10 is line feed: http://www.theasciicode.com.ar/extended-ascii-code/division-sign-obelus-ascii-code-246.html
	   65 72 65 6E 63
	   65 2C 0A 70 72
	   6F 64 75 63 74
	   2C 20 71 75 6F
	   74 69 65 6E 74
	   2C 20 61 6E 64
	   20 72 65 6D 61
	   69 6E 64 65 72
	   2E 20 00
 00000092 45 6E 74 65 72	Message2		BYTE		"Enter the first (larger) number: ", 0
	   20 74 68 65 20
	   66 69 72 73 74
	   20 28 6C 61 72
	   67 65 72 29 20
	   6E 75 6D 62 65
	   72 3A 20 00
 000000B4 45 6E 74 65 72	Message3	    BYTE        "Enter the second (smaller) number, greater than zero: ", 0
	   20 74 68 65 20
	   73 65 63 6F 6E
	   64 20 28 73 6D
	   61 6C 6C 65 72
	   29 20 6E 75 6D
	   62 65 72 2C 20
	   67 72 65 61 74
	   65 72 20 74 68
	   61 6E 20 7A 65
	   72 6F 3A 20 00
 000000EB 49 6D 70 72 65	Terminating		BYTE		"Impressed? Bye!", 10 , 10, 0
	   73 73 65 64 3F
	   20 42 79 65 21
	   0A 0A 00
 000000FD 00000000		number1		    DWORD		?																		;will be determined at the run time
 00000101 00000000		number2			DWORD		?																		;will be determined at the run time
 00000105 00000000		sum				DWORD		?																		;will be determined at the run time
 00000109 00000000		difference	    DWORD		?																		;will be determined at the run time
 0000010D 00000000		product		    DWORD		?
 00000111 00000000		quotient	    DWORD	    ?
 00000115 00000000		remainder		DWORD		?
 00000119 20 2B 20 00		plus			BYTE		" + ", 0
 0000011D 20 3D 20 00		equal			BYTE		" = ", 0
 00000121 20 2D 20 00		minus			BYTE		" - ", 0
 00000125 20 78 20 00		multiply		BYTE		" x ", 0
 00000129 20 F6 20 00		divide			BYTE	    " ", 246 ," ", 0														;http://www.theasciicode.com.ar/extended-ascii-code/division-sign-obelus-ascii-code-246.html
 0000012D 20 72 65 6D 61	rem				BYTE	    " remainder ", 0
	   69 6E 64 65 72
	   20 00
 00000139 54 68 65 20 66	error			BYTE		"The first number must be larger than the second.", 0
	   69 72 73 74 20
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   6C 61 72 67 65
	   72 20 74 68 61
	   6E 20 74 68 65
	   20 73 65 63 6F
	   6E 64 2E 00
 0000016A 44 6F 20 79 6F	again			BYTE		"Do you want to go again? Press y or Y to continue. ", 0
	   75 20 77 61 6E
	   74 20 74 6F 20
	   67 6F 20 61 67
	   61 69 6E 3F 20
	   50 72 65 73 73
	   20 79 20 6F 72
	   20 59 20 74 6F
	   20 63 6F 6E 74
	   69 6E 75 65 2E
	   20 00
 0000019E 00			againInput		BYTE		?


 00000000			.code
 00000000			main PROC

				;introduction
						;display name and program title
 00000000  BA 00000000 R			mov		edx, OFFSET Introduction			;move destination, source, use edx when you are dealing with strings
 00000005  E8 00000000 E			call	WriteString
 0000000A  E8 00000000 E			call	Crlf
 0000000F  E8 00000000 E			call	Crlf


						;displays instruction
 00000014  BA 00000037 R			mov		edx, OFFSET Message1
 00000019  E8 00000000 E			call	WriteString
 0000001E  E8 00000000 E	 		call	Crlf
 00000023  E8 00000000 E			call	Crlf

				;get data
 00000028			INPUT:
						;prompt the user to enter 1st number and stores input
 00000028  E8 00000000 E			call	Crlf						;advances the cursor to the beginning of the next line in the console
 0000002D  BA 00000092 R			mov		edx, OFFSET Message2		;prepairs message 2 for stdout
 00000032  E8 00000000 E			call	WriteString					;writes the message to the console
 00000037  E8 00000000 E			call	ReadInt;					; reads an integer entered by the user
 0000003C  A3 000000FD R			mov		number1, eax				;stores the integer in the eax register. for numbers use eax
					
 00000041			INPUT2:
						;prompt the user to enter 2nd numner and stores input
 00000041  E8 00000000 E			call	Crlf
 00000046  BA 000000B4 R			mov		edx, OFFSET Message3
 0000004B  E8 00000000 E			call	WriteString
 00000050  E8 00000000 E			call	ReadInt						;reads the 2nd integer
 00000055  A3 00000101 R			mov		number2, eax

				;Validating that the second number is less than the first
 0000005A  A1 000000FD R			mov		eax, number1
 0000005F  3B 05 00000101 R			cmp		eax, number2
 00000065  7D 0C				jge		CALCULATIONS							;jump if greater than or equal (if leftOp>=rightOp). See page 195 in the book


						;else
 00000067  BA 00000139 R			mov		edx, OFFSET error
 0000006C  E8 00000000 E			call	WriteString
 00000071  EB CE				jmp		INPUT2									;ask the user to different number. See page 632 in the book -6th edition


 00000073			CALCULATIONS:
				;calculations are performed

						;SUMMATION
 00000073  A1 000000FD R			mov		eax, number1				;destination,source
 00000078  03 05 00000101 R			add		eax, number2
 0000007E  A3 00000105 R			mov		sum, eax					;sum ends up in the eax register
					

						;DIFFERENCE
 00000083  A1 000000FD R			mov		eax, number1				;destination, source
 00000088  2B 05 00000101 R			sub		eax, number2
 0000008E  A3 00000109 R			mov		difference, eax				;difference ends up in the eax register
					

						;MULTIPLICATIONS
 00000093  A1 000000FD R			mov		eax, number1
 00000098  8B 1D 00000101 R			mov		ebx, number2
 0000009E  F7 E3				mul		ebx
 000000A0  A3 0000010D R			mov	    product, eax

						;DIVISION							;followed example posted on the Blackboad
 000000A5  A1 000000FD R			mov		eax, number1
 000000AA  99					cdq									;convert double word to quarwords
 000000AB  8B 1D 00000101 R			mov		ebx, number2
 000000B1  F7 F3				div		ebx
 000000B3  A3 00000111 R			mov		quotient, eax				;see page 627 6th edition Irvin
 000000B8  89 15 00000115 R			mov		remainder, edx

				;display results
 000000BE  E8 00000000 E			call	Crlf						;advances the cursor to the beginning of the next line in the console

						;SUMMATION RESULTS
 000000C3  A1 000000FD R			mov		eax, number1				;prepares 1st integer for stdout
 000000C8  E8 00000000 E			call	WriteDec
 000000CD  BA 00000119 R			mov		edx, OFFSET plus			;prepairs + siggn for stdout
 000000D2  E8 00000000 E			call    WriteString
 000000D7  A1 00000101 R			mov		eax, number2				;prepaires 2nd number for stout
 000000DC  E8 00000000 E			call	WriteDec
 000000E1  BA 0000011D R			mov		edx, OFFSET equal			;prepairs = sign got stdout
 000000E6  E8 00000000 E			call	WriteString
 000000EB  A1 00000105 R			mov		eax, sum					;prepairs sum for stdout
 000000F0  E8 00000000 E			call	WriteDec
 000000F5  E8 00000000 E			call	Crlf						;advances the cursor to the beginning of the next line in the console

						;SUBTRACTION RESULTS
 000000FA  A1 000000FD R			mov		eax, number1				;prepairs 1st integer for stdout
 000000FF  E8 00000000 E			call    WriteDec
 00000104  BA 00000121 R			mov		edx, OFFSET minus			;prepaires - sign for stdout
 00000109  E8 00000000 E			call	WriteString
 0000010E  A1 00000101 R			mov		eax, number2				;prepairs 2nd integer for stdout
 00000113  E8 00000000 E			call	WriteDec
 00000118  BA 0000011D R			mov		edx, OFFSET equal			;prepairs = sign for stdout
 0000011D  E8 00000000 E			call	WriteString
 00000122  A1 00000109 R			mov		eax, difference				;prepairs difference for stdout
 00000127  E8 00000000 E			call	WriteDec
 0000012C  E8 00000000 E			call	Crlf						;advances the cursor to the beginning of the next line in the console


						;MULTIPLICATION RESULTS
 00000131  A1 000000FD R			mov		eax, number1				;prepairs 1st number for stdout
 00000136  E8 00000000 E			call	WriteDec
 0000013B  BA 00000125 R			mov		edx, OFFSET multiply		;prepairs x sing for stdout
 00000140  E8 00000000 E			call	WriteString
 00000145  A1 00000101 R			mov		eax, number2				;prepairs 2nd number for stdout
 0000014A  E8 00000000 E			call	WriteDEc
 0000014F  BA 0000011D R			mov		edx, OFFSET equal			;prepairs equal sign for std out
 00000154  E8 00000000 E			call	WriteString
 00000159  A1 0000010D R			mov		eax, product				;prepairs product for stdout
 0000015E  E8 00000000 E			call    WriteDec
 00000163  E8 00000000 E			call	Crlf						;advances the cursor to the beginning of the next line in the console


						;DIVISION RESULTS
 00000168  A1 000000FD R			mov		eax, number1				;prepairs 1st # for stdout
 0000016D  E8 00000000 E			call	WriteDec					;display the number1
 00000172  BA 00000129 R			mov		edx, OFFSET divide			;prepais divide for stdout
 00000177  E8 00000000 E			call	WriteString					;display divide sign
 0000017C  A1 00000101 R			mov		eax, number2				;prepairs 2nd # for stdout	
 00000181  E8 00000000 E			call	WriteDec					;display number2 
 00000186  BA 0000011D R			mov	    edx, OFFSET equal			;prepairs = sign for stdout
 0000018B  E8 00000000 E			call	WriteString
 00000190  A1 00000111 R			mov		eax, quotient				;prepairs quotient for stdout
 00000195  E8 00000000 E			call	WriteDec
 0000019A  BA 0000012D R			mov		edx, OFFSET rem				;prepairs remainder message for setdout
 0000019F  E8 00000000 E			call	WriteString
 000001A4  A1 00000115 R			mov		eax, remainder				;prepaires remainder for stdout
 000001A9  E8 00000000 E			call	WriteDec
 000001AE  E8 00000000 E			call	Crlf
 000001B3  E8 00000000 E			call	Crlf

				;ask the user if they want to go another round
 000001B8  E8 00000000 E			call	CrLf						;blank line
 000001BD  BA 0000016A R			mov		edx, OFFSET	again			;again is moved to edx
 000001C2  E8 00000000 E			call	WriteString					;message is displayed
 000001C7  E8 00000000 E			call	ReadChar					;entry is read
 000001CC  A2 0000019E R			mov		againInput, AL				;entry is stored

						;if the answer is capital case Y
 000001D1  80 3D 0000019E R			cmp		againInput, 'Y'				;compare the entry to Y
	   59
 000001D8  0F 84 FFFFFE4A			je		INPUT						;jump if equal, see page 631 in the book

						;if the answer is lowercase y
 000001DE  80 3D 0000019E R			cmp		againInput, 'y'				;compare the entery to y
	   79
 000001E5  0F 84 FFFFFE3D			je		INPUT						;if matches, do go to the input

						;if the user doe not say Y or y		;if entry is not Y or y, display goodbye message
 000001EB  EB 00				jmp		GOODBYE						;jump unconditionally to label. see page 632 in the book

				;saying goodbye
 000001ED			GOODBYE:
						;TERMINATION MESSAGE
 000001ED  E8 00000000 E			call	CrLf
 000001F2  E8 00000000 E			call	CrLf
 000001F7  BA 000000EB R			mov		edx, OFFSET Terminating		;prepaire message
 000001FC  E8 00000000 E			call	WriteString					;prints message to the consol

						exit								; exit to operating system
 00000201  6A 00	   *	    push   +000000000h
 00000203  E8 00000000 E   *	    call   ExitProcess

 00000208			main ENDP


				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    10/12/14 22:10:08
Assignment1    (AS1.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000019F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000208 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000208 Public STDCALL
  INPUT  . . . . . . . . . . . .	L Near	 00000028 _TEXT	
  INPUT2 . . . . . . . . . . . .	L Near	 00000041 _TEXT	
  CALCULATIONS . . . . . . . . .	L Near	 00000073 _TEXT	
  GOODBYE  . . . . . . . . . . .	L Near	 000001ED _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Introduction . . . . . . . . . .	Byte	 00000000 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Message1 . . . . . . . . . . . .	Byte	 00000037 _DATA	
Message2 . . . . . . . . . . . .	Byte	 00000092 _DATA	
Message3 . . . . . . . . . . . .	Byte	 000000B4 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
Terminating  . . . . . . . . . .	Byte	 000000EB _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
againInput . . . . . . . . . . .	Byte	 0000019E _DATA	
again  . . . . . . . . . . . . .	Byte	 0000016A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
difference . . . . . . . . . . .	DWord	 00000109 _DATA	
divide . . . . . . . . . . . . .	Byte	 00000129 _DATA	
equal  . . . . . . . . . . . . .	Byte	 0000011D _DATA	
error  . . . . . . . . . . . . .	Byte	 00000139 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 00000121 _DATA	
multiply . . . . . . . . . . . .	Byte	 00000125 _DATA	
number1  . . . . . . . . . . . .	DWord	 000000FD _DATA	
number2  . . . . . . . . . . . .	DWord	 00000101 _DATA	
plus . . . . . . . . . . . . . .	Byte	 00000119 _DATA	
product  . . . . . . . . . . . .	DWord	 0000010D _DATA	
quotient . . . . . . . . . . . .	DWord	 00000111 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	DWord	 00000115 _DATA	
rem  . . . . . . . . . . . . . .	Byte	 0000012D _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000105 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors

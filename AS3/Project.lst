Microsoft (R) Macro Assembler Version 12.00.30501.0	    11/02/14 22:42:25
!Integer Accumulator					(AS3.asm  Page 1 - 1


				TITLE Integer Accumulator					(AS3.asm)
				; Author: Tatyana Vlaskin
				; Course: CS 271					 Date: 11.20.2014
				; Assignment: Program #3
				; Description:  This program will ask a user for number inputs, until a negative number is entered.
				;Once the user enters a negative number, the sum and average is calculated, excluding the negative number.
				;The average is rounded to the nearst number. If the user enters a number that is outside the valid range,
				;which is 0-100, inclusive an error message is displayed. At the end of the calculations, the user
				;has an option to do another calcualtion, without closing the console window.
				;STEP BY STEP DESCRIPTION OF THE PROGRAM
				;1. Displays the program titles and programmers name
				;2. Asks the user to enter their name and greets the user once the name is eneterd
				;3. Display instructions to the user
				;4. Repeatadly prompt the user to enter a number.
				;5. Entered # is validated to be <=100
				;6. Every valid # id counted and accumulated
				;7. Once the negative # is enetered the negative # is discarded and the average of the nonnegative #s is calculated
				;8. The following information is displayed back to the user: number of nonnegative #s eneterd, the sum of the #s, 
				;the average rounded to the neares int and a parting message with users name
				;references: https://github.com/jonziefle/CS271/blob/master/Homework%203/CS271_HW3.asm


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;constants
 = 00000000			LOWER_LIMIT = 0;
 = 00000064			UPPER_LIMIT = 100;


 00000000			.data
 00000000 57 65 6C 63 6F	Introduction	    BYTE	"Welcome to the Assignment 3: Integer Accumulator by ", 0				
	   6D 65 20 74 6F
	   20 74 68 65 20
	   41 73 73 69 67
	   6E 6D 65 6E 74
	   20 33 3A 20 49
	   6E 74 65 67 65
	   72 20 41 63 63
	   75 6D 75 6C 61
	   74 6F 72 20 62
	   79 20 00
 00000035 54 61 74 79 61	AuthorsName			BYTE	"Tatyana Vlaskin ", 0
	   6E 61 20 56 6C
	   61 73 6B 69 6E
	   20 00
 00000046 57 68 61 74 20	Question1			BYTE	"What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000005A 48 65 6C 6C 6F	Greeting			BYTE	"Hello, ", 0
	   2C 20 00
 00000062 54 68 69 73 20	Instructions		BYTE	"This program calculates sum and average of #s, enetered by the "
	   70 72 6F 67 72
	   61 6D 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 73
	   75 6D 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 23 73
	   2C 20 65 6E 65
	   74 65 72 65 64
	   20 62 79 20 74
	   68 65 20
 000000A1  75 73 65 72 2E						BYTE	"user. " , 10, "Please enter numbers less than or equal to "
	   20 0A 50 6C 65
	   61 73 65 20 65
	   6E 74 65 72 20
	   6E 75 6D 62 65
	   72 73 20 6C 65
	   73 73 20 74 68
	   61 6E 20 6F 72
	   20 65 71 75 61
	   6C 20 74 6F 20
 000000D3  31 30 30 2E 20						BYTE	"100. " , 10, "Enter a negative number when you are finished to see results."	, 0
	   0A 45 6E 74 65
	   72 20 61 20 6E
	   65 67 61 74 69
	   76 65 20 6E 75
	   6D 62 65 72 20
	   77 68 65 6E 20
	   79 6F 75 20 61
	   72 65 20 66 69
	   6E 69 73 68 65
	   64 20 74 6F 20
	   73 65 65 20 72
	   65 73 75 6C 74
	   73 2E 00
 00000117 45 6E 74 65 72	Question2			BYTE	"Enter number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000126 59 6F 75 20 65	Display1			BYTE	"You entered ",0
	   6E 74 65 72 65
	   64 20 00
 00000133 20 6E 6F 6E 2D	Display2			BYTE	" non-negative numbers.",0
	   6E 65 67 61 74
	   69 76 65 20 6E
	   75 6D 62 65 72
	   73 2E 00
 0000014A 54 68 65 20 73	SumDisplay			BYTE	"The sum of your numbers is ",0
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 20 00
 00000166 54 68 65 20 72	AverageDisplay		BYTE	"The rounded average is ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00
 0000017E 45 52 52 4F 52	Error				BYTE	"ERROR! The number is out of range. Enter a number between 0 and 100 inclusive. ",0
	   21 20 54 68 65
	   20 6E 75 6D 62
	   65 72 20 69 73
	   20 6F 75 74 20
	   6F 66 20 72 61
	   6E 67 65 2E 20
	   45 6E 74 65 72
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 30 20
	   61 6E 64 20 31
	   30 30 20 69 6E
	   63 6C 75 73 69
	   76 65 2E 20 00
 000001CE 59 6F 75 20 68	noNubmbers			BYTE	"You have NOT entered any non-negative "
	   61 76 65 20 4E
	   4F 54 20 65 6E
	   74 65 72 65 64
	   20 61 6E 79 20
	   6E 6F 6E 2D 6E
	   65 67 61 74 69
	   76 65 20
 000001F4  6E 75 6D 62 65						BYTE	"numbers. " , 10, "There is nothing to calculate. ",0
	   72 73 2E 20 0A
	   54 68 65 72 65
	   20 69 73 20 6E
	   6F 74 68 69 6E
	   67 20 74 6F 20
	   63 61 6C 63 75
	   6C 61 74 65 2E
	   20 00
 0000021E 54 68 61 6E 6B	Goodbye				BYTE	"Thank you for playing Integer "
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 49 6E 74
	   65 67 65 72 20
 0000023C  41 63 63 75 6D						BYTE	"Accumulator!", 10, "It's been a pleasure to meet you, ",0
	   75 6C 61 74 6F
	   72 21 0A 49 74
	   27 73 20 62 65
	   65 6E 20 61 20
	   70 6C 65 61 73
	   75 72 65 20 74
	   6F 20 6D 65 65
	   74 20 79 6F 75
	   2C 20 00
 0000026C 44 6F 20 79 6F	tryAgain			BYTE	"Do you want to go again? Press y to play "
	   75 20 77 61 6E
	   74 20 74 6F 20
	   67 6F 20 61 67
	   61 69 6E 3F 20
	   50 72 65 73 73
	   20 79 20 74 6F
	   20 70 6C 61 79
	   20
 00000295  20 61 67 61 69						BYTE	" again.", 10, "Press any other key to get to farewell message.", 0
	   6E 2E 0A 50 72
	   65 73 73 20 61
	   6E 79 20 6F 74
	   68 65 72 20 6B
	   65 79 20 74 6F
	   20 67 65 74 20
	   74 6F 20 66 61
	   72 65 77 65 6C
	   6C 20 6D 65 73
	   73 61 67 65 2E
	   00
 000002CD 00000002		two					DWORD	2							;We want to round when the remainder if it is half or more of the count
 000002D1 41 76 65 72 61	floatPoint			BYTE	"Average as the float-point: ",0
	   67 65 20 61 73
	   20 74 68 65 20
	   66 6C 6F 61 74
	   2D 70 6F 69 6E
	   74 3A 20 00


				; Input Variables
 000002EE  00000021 [		UserName			BYTE	33  DUP(0)					;variable for the user name
	    00
	   ]
 0000030F 00000000		number			    DWORD	?
 00000313 00000000		count				DWORD	?
 00000317 00000000		sum					DWORD	?
 0000031B 00000000		average				DWORD	?
 0000031F 00000000		remainder			DWORD	?
 00000323 00			againInput			BYTE	?							;variable in case the user wants to do calculations for another number

 00000000			.code
 00000000			main PROC

				; INTRODUCTION
						
						;display the name of the programer and program title
 00000000  BA 00000000 R			mov			edx, OFFSET Introduction
 00000005  E8 00000000 E			call		WriteString
 0000000A  BA 00000035 R			mov		    edx, OFFSET AuthorsName
 0000000F  E8 00000000 E			call		WriteString
 00000014  E8 00000000 E			call		CrLf
 00000019  E8 00000000 E			call		CrLf


						;prompt the user to enter their name
 0000001E  BA 00000046 R			mov			edx, OFFSET Question1
 00000023  E8 00000000 E			call		WriteString
 00000028  BA 000002EE R			mov			edx, OFFSET userName
 0000002D  B9 00000021				mov			ecx, SIZEOF userName
						;mov		ecx, 32
 00000032  E8 00000000 E			call		ReadString

						;display the users name along with the Hello message
 00000037  E8 00000000 E			call		CrLf
 0000003C  BA 0000005A R			mov			edx, OFFSET Greeting
 00000041  E8 00000000 E			call		WriteString
 00000046  BA 000002EE R			mov			edx, OFFSET userName
 0000004B  E8 00000000 E			call		WriteString
 00000050  E8 00000000 E			call		CrLf

				;INSTRUCTIONS TO THE USER
						
						;rules of the program, let the user know that only # between 0-100 can be entered.
 00000055  BA 00000062 R			mov			edx, OFFSET Instructions
 0000005A  E8 00000000 E			call		WriteString
 0000005F  E8 00000000 E			call		CrLf


 00000064			RESTART:
 00000064  E8 00000000 E			call	CrLf
 00000069  B8 00000000				mov		eax, 0
 0000006E  A3 00000317 R			mov		sum, eax
 00000073  A3 0000031B R			mov		average, eax
 00000078  A3 00000313 R			mov		count, eax
 0000007D  EB 00				jmp		ASK_VALIDATE


				;REQUESTING INTEGERS FROM THE USER
				; asks for an integer and Validates the integer (makes sure that int is between 0-100, inclusive
 0000007F			ASK_VALIDATE:
							
						;ask for an int, and reads an int
 0000007F  BA 00000117 R			mov		edx, OFFSET Question2
 00000084  E8 00000000 E			call	WriteString
 00000089  E8 00000000 E			call	ReadInt								;Reads a 32-bit signed integer from the keyboard and return the value in EAX. 
						
						; validate an int [0-100]
 0000008E  83 F8 64				cmp		eax, UPPER_LIMIT					;CMP destination, source
 00000091  7F 07				jg		ERROR_TO_HIGH						;jump if greater to the error message

						;check if the number is < 0
 00000093  83 F8 00				cmp		eax, LOWER_LIMIT					;CMP destination, source
 00000096  7C 30				jl		DONE								;jump if less to the end of the program

						; if the number is in the range [0-100] inclusive, go to the CALCULATION label
 00000098  EB 11				jmp		CALCULATIONS						;jump unconditionally to the label CALCULATION


 0000009A			ERROR_TO_HIGH:

						; If number > 100, print error and go to the ASK_VALIDATE loop
 0000009A  BA 0000017E R			mov		edx, OFFSET Error
 0000009F  E8 00000000 E			call	WriteString
 000000A4  E8 00000000 E			call	CrLf
 000000A9  EB D4				jmp		ASK_VALIDATE

				;adds numbers added by the user [0-100]
 000000AB			CALCULATIONS:
 000000AB  A3 0000030F R			mov		number, eax								; mov destination, source. number from the eax is moved to the number mem 
 000000B0  A1 00000317 R			mov		eax, sum								; mov destination, source. number from the total mem is moved to the eax reg
 000000B5  03 05 0000030F R			add		eax, number								; add destination, source. A source operand is added to a destinantion operand, 
																		; and the sum is stored in the destination. SUM = SUM + NUMBER
 000000BB  A3 00000317 R			mov		sum, eax								; mov destination, source. total from the EAX is moved to the sum operand

						;increments count 
 000000C0  FF 05 00000313 R			inc		count									;increment memory operand by 1. count valid entried

						;ask the user for the next number
 000000C6  EB B7				jmp		ASK_VALIDATE							; jump unconditionally to the ASK_VALIDATE label and ask the user the enter the next number


				; If number < 0, then exit loop, calcualtes the average, and print calculations
 000000C8			DONE:
 000000C8  E8 00000000 E			call Crlf

						;calculates average
 000000CD  83 3D 00000313 R			cmp		count, 0									;CMP destination, source. if NO non-negative numbers were entered (count =0 , a special message will be displayed
	   00
 000000D4  74 4F				je		SPECIAL										;jump if equal. jumps to special message if no number entered

						;if the user enetered non-negative numbers, calculate the average
 000000D6  A1 00000317 R			mov		eax, sum									; mov destination, source. value from sum is moved to EAX				
 000000DB  BA 00000000				mov		edx, 0										;set edx to 0, the remainder after div operation will go there, so we want to initialize it to zero in case it has something else from previous operation
 000000E0  F7 35 00000313 R			div		count										;divident is EDX:EAX. divide sum by count
 000000E6  A3 0000031B R			mov		average, eax								; quation is in the EAX. move destination, source
 000000EB  89 15 0000031F R			mov		remainder, edx								;remainder is in the EDX. move destination, source
 000000F1  A1 00000313 R			mov		eax, count									;mov destination, source. count is moved to the EAX register
						
						;compare the remainder to decide what is the nearst intereger. if remainder is half or more of the count, we want to round up

						;if remainder is 0
 000000F6  83 3D 0000031F R			cmp		remainder, 0	
	   00
 000000FD  74 37				je		RESULTS										;if remainder is equal to zero jump to calculations

						;take count and divide it by 2
 000000FF  A1 00000313 R			mov		eax, count									;mov destination, source. count is moved into the EAX registed
 00000104  BA 00000000				mov		edx,0										; set edx to 0, edx will store new remainder
 00000109  F7 35 000002CD R			div		two											;divide count by 2. count is divided by 2
 0000010F  83 FA 00				cmp		edx, 0										;
 00000112  74 01				je		ROUND										;jump if equal, this is the indication that count is EVEN
 00000114  40					inc		eax											;this is the indication that count is ODD, add 1 to count/2. this is needed because lets say 
																			;count is 3, so 3/2 = 1.5.
																			; So in case we have  2, 10, 22, where remainder is 1, and we compare remainder 1 to the quation of 
																			;the count/2,  which is one. The computer will think that average needs to be incremented, but in reality
																			;the incrementation is not required. so we need to fix this to avoid incrementaion. the easy fix is add 1 
																			;to the quation
																		
 00000115			ROUND:
						;take the remainder and compare it to the quotion of count/2 division. PLEASE note, quation of count/2 division is in the EAX right now
 00000115  39 05 0000031F R			cmp		remainder, eax
 0000011B  7C 19				jl		RESULTS										;jump if less
 0000011D  FF 05 0000031B R			inc		average										;if not less, the average needs to be incemeneted by 1
 00000123  EB 11				jmp		RESULTS										;jump unconditionally	to RESULTS

					
				; TERMINATING MESSAGE

				;message is displayed if no non-negative #s were enteres
 00000125			SPECIAL:

 00000125  E8 00000000 E			call	CrLf
 0000012A  BA 000001CE R			mov		edx, OFFSET noNubmbers
 0000012F  E8 00000000 E			call	WriteString
 00000134  EB 5A				jmp		AGAIN								;jump unconditionaly to label AGAIN

				; if non-negative numbers were entered
 00000136			RESULTS:

						;display count
 00000136  E8 00000000 E			call	CrLf
 0000013B  BA 00000126 R			mov		edx, OFFSET Display1
 00000140  E8 00000000 E			call	WriteString
 00000145  A1 00000313 R			mov 	eax, count
 0000014A  E8 00000000 E			call	WriteDec
 0000014F  BA 00000133 R			mov		edx, OFFSET Display2
 00000154  E8 00000000 E			call	WriteString


						;display sum
 00000159  E8 00000000 E			call	CrLf
 0000015E  BA 0000014A R			mov		edx, OFFSET sumDisplay
 00000163  E8 00000000 E			call	WriteString
 00000168  A1 00000317 R			mov		eax, sum
 0000016D  E8 00000000 E			call	WriteDec

						;display average
 00000172  E8 00000000 E			call	CrLf
 00000177  BA 00000166 R			mov		edx, OFFSET averageDisplay
 0000017C  E8 00000000 E			call	WriteString
 00000181  A1 0000031B R			mov		eax, average
 00000186  E8 00000000 E			call	WriteDec
 0000018B  E8 00000000 E			call	CrLf

 00000190			AGAIN:
				; THIS MAKES TESTING MUCH EASIER, SO I AM ADDING THIS TO THE CODE
				;ask the user if they want to go another round
 00000190  E8 00000000 E			call	CrLf
 00000195  E8 00000000 E			call	CrLf							;blank line
 0000019A  BA 0000026C R			mov		edx, OFFSET	tryAgain			;again is moved to edx
 0000019F  E8 00000000 E			call	WriteString						;message is displayed
 000001A4  E8 00000000 E			call	ReadChar						;entry is read
 000001A9  A2 00000323 R			mov		againInput, AL					;entry is stored

						;if the answer is capital case Y
 000001AE  80 3D 00000323 R			cmp		againInput, 'Y'					;compare the entry to Y
	   59
 000001B5  0F 84 FFFFFEA9			je		RESTART							;jump if equal, see page 631 in the book

						;if the answer is lowercase y
 000001BB  80 3D 00000323 R			cmp		againInput, 'y'					;compare the entery to y
	   79
 000001C2  0F 84 FFFFFE9C			je		RESTART							;if matches, do go to the input

						;if the user doe not say Y or y			;if entry is not Y or y, display goodbye message
 000001C8  EB 00				jmp		FAREWELL						;jump unconditionally to label. see page 632 in the book

 000001CA			FAREWELL:
						
 000001CA  E8 00000000 E			call	CrLf
 000001CF  E8 00000000 E			call	CrLf
 000001D4  BA 0000021E R			mov		edx, OFFSET Goodbye						; Prepare message
 000001D9  E8 00000000 E			call	WriteString								; Print to console
 000001DE  BA 000002EE R			mov		edx, OFFSET userName
 000001E3  E8 00000000 E			call	WriteString
 000001E8  E8 00000000 E			call	CrLf
 000001ED  E8 00000000 E			call	CrLf


					exit
 000001F2  6A 00	   *	    push   +000000000h
 000001F4  E8 00000000 E   *	    call   ExitProcess
 000001F9			main ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    11/02/14 22:42:25
!Integer Accumulator					(AS3.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000324 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001F9 Public STDCALL
  RESTART  . . . . . . . . . . .	L Near	 00000064 _TEXT	
  ASK_VALIDATE . . . . . . . . .	L Near	 0000007F _TEXT	
  ERROR_TO_HIGH  . . . . . . . .	L Near	 0000009A _TEXT	
  CALCULATIONS . . . . . . . . .	L Near	 000000AB _TEXT	
  DONE . . . . . . . . . . . . .	L Near	 000000C8 _TEXT	
  ROUND  . . . . . . . . . . . .	L Near	 00000115 _TEXT	
  SPECIAL  . . . . . . . . . . .	L Near	 00000125 _TEXT	
  RESULTS  . . . . . . . . . . .	L Near	 00000136 _TEXT	
  AGAIN  . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  FAREWELL . . . . . . . . . . .	L Near	 000001CA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AuthorsName  . . . . . . . . . .	Byte	 00000035 _DATA	
AverageDisplay . . . . . . . . .	Byte	 00000166 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
Display1 . . . . . . . . . . . .	Byte	 00000126 _DATA	
Display2 . . . . . . . . . . . .	Byte	 00000133 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error  . . . . . . . . . . . . .	Byte	 0000017E _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Goodbye  . . . . . . . . . . . .	Byte	 0000021E _DATA	
Greeting . . . . . . . . . . . .	Byte	 0000005A _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Instructions . . . . . . . . . .	Byte	 00000062 _DATA	
Introduction . . . . . . . . . .	Byte	 00000000 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_LIMIT  . . . . . . . . . .	Number	 00000000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Question1  . . . . . . . . . . .	Byte	 00000046 _DATA	
Question2  . . . . . . . . . . .	Byte	 00000117 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SumDisplay . . . . . . . . . . .	Byte	 0000014A _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	Number	 00000064h   
UserName . . . . . . . . . . . .	Byte	 000002EE _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
againInput . . . . . . . . . . .	Byte	 00000323 _DATA	
average  . . . . . . . . . . . .	DWord	 0000031B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
count  . . . . . . . . . . . . .	DWord	 00000313 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
floatPoint . . . . . . . . . . .	Byte	 000002D1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
noNubmbers . . . . . . . . . . .	Byte	 000001CE _DATA	
number . . . . . . . . . . . . .	DWord	 0000030F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	DWord	 0000031F _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000317 _DATA	
tryAgain . . . . . . . . . . . .	Byte	 0000026C _DATA	
two  . . . . . . . . . . . . . .	DWord	 000002CD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors

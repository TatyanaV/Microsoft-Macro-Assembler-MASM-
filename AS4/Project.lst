Microsoft (R) Macro Assembler Version 12.00.30501.0	    11/09/14 21:09:54
%Prime Number Calculator					(AS4.asm  Page 1 - 1


				TITLE Prime Number Calculator					(AS4.asm)
				; Author: Tatyana Vlaskin
				; Course: CS 271					 Date: 11.09.2014
				; Assignment: Program #4
				; Description:   This program will calculate and display prime numbers in a given range
				; The user is asked to eneter # of prime numbers that they want to be displayed.
				; Acceptable number  that the user can enter is [1-200].
				; If it is detected that the value is not in the acceptable range, 
				; an error message is displayed and the user is asked to reenter an integer
				; Once an integer is accepted, the program calculates and displayes the prime numbers
				; The results will be displayed 10 primers  per line

				;refference: https://github.com/donatzm/CS271/blob/master/donatzm/Assignment04.asm
				;			 https://github.com/JohnLZeller/Classes/blob/master/CS271/program4.asm


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;contants
 = 00000001			LOW_LIMIT = 1
 = 000000C8			HIGH_LIMIT = 200

 00000000			.data

				;program identifiers
 00000000 57 65 6C 63 6F	ProgramName		    BYTE	"Welcome to the Assignment 4: Prime Number Calculator by ", 0				
	   6D 65 20 74 6F
	   20 74 68 65 20
	   41 73 73 69 67
	   6E 6D 65 6E 74
	   20 34 3A 20 50
	   72 69 6D 65 20
	   4E 75 6D 62 65
	   72 20 43 61 6C
	   63 75 6C 61 74
	   6F 72 20 62 79
	   20 00
 00000039 54 61 74 79 61	AuthorName			BYTE	"Tatyana Vlaskin. ", 0
	   6E 61 20 56 6C
	   61 73 6B 69 6E
	   2E 20 00
 0000004B 54 68 69 73 20	Introduction1		BYTE	"This program calculates prime " 
	   70 72 6F 67 72
	   61 6D 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 70
	   72 69 6D 65 20
 00000069  6E 75 6D 62 65						BYTE	"numbers",10, "You are asked to enter the number of prime numbers you would like to "
	   72 73 0A 59 6F
	   75 20 61 72 65
	   20 61 73 6B 65
	   64 20 74 6F 20
	   65 6E 74 65 72
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   20 6E 75 6D 62
	   65 72 73 20 79
	   6F 75 20 77 6F
	   75 6C 64 20 6C
	   69 6B 65 20 74
	   6F 20
 000000B6  73 65 65 2E 0A						BYTE	"see.", 10, "I'll accept orderes for up to 200 primers.", 0
	   49 27 6C 6C 20
	   61 63 63 65 70
	   74 20 6F 72 64
	   65 72 65 73 20
	   66 6F 72 20 75
	   70 20 74 6F 20
	   32 30 30 20 70
	   72 69 6D 65 72
	   73 2E 00
 000000E6 45 6E 74 65 72	prompt				BYTE	"Enter the number of primers to display [1 .. 200] ", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   72 73 20 74 6F
	   20 64 69 73 70
	   6C 61 79 20 5B
	   31 20 2E 2E 20
	   32 30 30 5D 20
	   00
 00000119 4F 75 74 20 6F	error				BYTE	"Out of range! Try again. Acceptable numbers [1 .. 200]", 0
	   66 20 72 61 6E
	   67 65 21 20 54
	   72 79 20 61 67
	   61 69 6E 2E 20
	   41 63 63 65 70
	   74 61 62 6C 65
	   20 6E 75 6D 62
	   65 72 73 20 5B
	   31 20 2E 2E 20
	   32 30 30 5D 00
 00000150 00000000		number				DWORD	?
 00000154 00000000		truth				DWORD	?
 00000158 00000001		test_Number			DWORD	1
 0000015C 00000000		factors				DWORD	?
 00000160 00000000		divisor				DWORD	?
 00000164 00000001		Primer_Found		DWORD	1
 00000168 0000000A		nextLine		    DWORD	10
 0000016C 52 65 73 75 6C	goodbye			    BYTE	"Results certified by ", 0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 00
 00000182 47 6F 6F 64 62	goodbye2			BYTE	"Goodbye.", 0
	   79 65 2E 00



 00000000			.code
 00000000			main PROC

 00000000  E8 00000016			call	introduction
 00000005  E8 00000044			call	getUserData
 0000000A  E8 000000A2			call	showPrimes
 0000000F  E8 0000013F			call	farewell

				exit
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP



				;-----------------------------------------------------------------------------------------------------------------------------------
				; introduction PROC 
				; Displays an introduction for the program, programmer and instructions for use
				; Receives: Nothing
				; Returns: Nothing
				; preconditions: none
				; registers changed: edx
				;-----------------------------------------------------------------------------------------------------------------------------------------------------

 0000001B			introduction PROC
					;prints program name and program author
 0000001B  BA 00000000 R		mov		edx, OFFSET programName
 00000020  E8 00000000 E		call	WriteString
 00000025  BA 00000039 R		mov		edx, OFFSET authorName
 0000002A  E8 00000000 E		call	WriteString
 0000002F  E8 00000000 E		call	CrLf

					;prints user instructions
 00000034  E8 00000000 E		call	CrLf
 00000039  BA 0000004B R		mov		edx, OFFSET Introduction1
 0000003E  E8 00000000 E		call	WriteString
 00000043  E8 00000000 E		call	CrLf
 00000048  E8 00000000 E		call	CrLf
 0000004D  C3				ret
 0000004E			introduction ENDP


				;----------------------------------------------------------------------------------------------------------------------------------------
				; getUserData PROC 
				; Procedure to accept input from the user
				; Receives: Nothing
				; Returns: number
				; preconditions: none
				; registers changed: EAX
				;-----------------------------------------------------------------------------------------------------------------------------------------

				;procedure to get numbers from the user
 0000004E			getUserData PROC

 0000004E			numberInput:									;gets user input
 0000004E  BA 000000E6 R			mov			edx, OFFSET prompt
 00000053  E8 00000000 E			call		WriteString
 00000058  E8 00000000 E			call		ReadInt
 0000005D  A3 00000150 R			mov			number, eax

 00000062  E8 0000000A				call		validateInput				;validates the input
 00000067  83 3D 00000154 R			cmp			truth, 0
	   00
 0000006E  74 DE				je			numberInput					;jump if equal

 00000070  C3					ret										;return from procedure

 00000071			getUserData ENDP


				;-------------------------------------------------------------------------------------------------------------------------------------------------
				;validateInput PROC
				;Procedure to validate input number
				;receives: global number, global LOW_LIMIT, global HIGH_LIMIT, global error
				;returns: none
				;preconditions: none
				;registers changed: EDX
				;--------------------------------------------------------------------------------------------------------------------------------------------------

 00000071			validateInput PROC
						
 00000071  E8 00000000 E		call		CrLf
 00000076  83 3D 00000150 R		cmp			number, LOW_LIMIT				;number < 1 invalid
	   01
 0000007D  7C 18			jl			invalid							;jump if less to invalid label


 0000007F  81 3D 00000150 R		cmp			number, HIGH_LIMIT				;number > 300 is invalid
	   000000C8
 00000089  7F 0C			jg			invalid							;jump if greater to invalid lable

					
 0000008B  C7 05 00000154 R		mov			truth, 1						;number is valid
	   00000001
 00000095  EB 19			jmp			valid							;unconditional jump --- if number is in the range 1-200

					
 00000097				invalid:									;lets the user know know the entry is invalid
 00000097  C7 05 00000154 R			mov		truth, 0
	   00000000
 000000A1  BA 00000119 R			mov		edx, OFFSET error				;error is prepared
 000000A6  E8 00000000 E			call	WriteString						;error is displayed
 000000AB  E8 00000000 E			call	CrLf

 000000B0				valid:									    ;if the number is valid return from procedure
 000000B0  C3					ret

 000000B1			validateInput ENDP


				;---------------------------------------------------------------------------------------------------------------------------------------------------------
				;showPrimes PROC
				;Procedure to display the calculated primes
				;receives: global Primer_Found, global nextline, global number
				;returns: none
				;preconditions: NumPrimes > 0
				;registers changed: AL, EAX
				;----------------------------------------------------------------------------------------------------------------------------------------------------------
 000000B1			showPrimes PROC

 000000B1  E8 00000000 E		call	CrLf
 000000B6  8B 0D 00000150 R		mov		ecx, number							;valid number that was entered by the user is moved into the ecx register

 000000BC				Primer_Loop:								;loop that will display primers on the console
 000000BC  FF 0D 00000168 R			dec		nextLine						;decrements the number of terms to display before line break
 000000C2  E8 0000002E				call	isPrime							;calls isPrime to calculate prime numbers
 000000C7  A1 00000164 R			mov		eax, Primer_Found				;if it was determined that the number is a primer number, move it to the eax register
 000000CC  E8 00000000 E			call	WriteDec						;write the numeber on the console
					
 000000D1  83 3D 00000168 R			cmp		nextLine, 0						;compare the line break to 0. please note that initially line break was set to 10
	   00
 000000D8  74 09				je		newLine							;jump if equal to the new line
 000000DA  B0 09				mov		al, TAB							;if the number will stay on the same line, put some space between the numbers
 000000DC  E8 00000000 E			call	WriteChar
 000000E1  EB 0F				jmp		oldLine							;go to the oldLine

 000000E3				newLine:									;next number will be displayed on the new line
 000000E3  E8 00000000 E			call	CrLf							;moves the cursor to the new line
 000000E8  C7 05 00000168 R			mov		nextLine, 10					;reset the lineBreat to 10
	   0000000A

 000000F2				oldLine:									;the number is displayed on the same line
 000000F2  E2 C8				loop	Primer_Loop						;continue looping though the numbers

 000000F4  C3					ret										;return from procedure

 000000F5			showPrimes ENDP


				;---------------------------------------------------------------------------------------------------------------------------------------------------
				; isPrime PROC 
				; Checks to see whether a given number is a prime number or not
				; Receives: global number, globale divisor, global factors, global test_number
				; Returns: Nothing
				; registers used: EAX, EDX
				;---------------------------------------------------------------------------------------------------------------------------------------------------

 000000F5			isPrime PROC
					
 000000F5				new_Number:									;look at the number one at a time and trying to determine if its a prime number
 000000F5  C7 05 00000160 R			mov		divisor, 0						;set divisor to 0
	   00000000
 000000FF  C7 05 0000015C R			mov		factors, 0						;set factors to 0
	   00000000
 00000109  FF 05 00000158 R			inc		test_Number						;increment test number right. please note that number 1 is not a prime number, so we can go directly to number 2

 0000010F				prime:										;divides test number to determine how many factors the number has
 0000010F  FF 05 00000160 R			inc		divisor							;increment the divisor, so we start with 1
 00000115  A1 00000158 R			mov		eax, test_Number				;test number is moved in the eax
 0000011A  BA 00000000				mov		edx, 0							;edx is set to 0, this register will store the remainder after the division
 0000011F  F7 35 00000160 R			div		divisor							;divide by divisor
 00000125  83 FA 00				cmp		edx, 0							;compare edx [register that stores the remainder] to 0 
 00000128  75 06				jne		do_Not_Add						;jump if not equal, this is an indication that this number is not divisible by the corresponding divisor
 0000012A  FF 05 0000015C R			inc		factors							;if we there was no jump to the do not add label, this is an indication that the number is divisible by the divisor
																; and we need to the increment factors

 00000130				do_Not_Add:									;ends loop when the divisor is equal to the test number		
 00000130  A1 00000160 R			mov		eax, divisor					;we move divisor to the eax	
 00000135  39 05 00000158 R			cmp		test_Number, eax				;test number is compared to the eax [it has divisor now]
 0000013B  74 0B				je		Is_Primer						;jump if equal. this is an indication that we do not need to increment divisors any more,
																;at this point number of factors is equal to 2, so we need to display this number

						; if the test number is not equal to the divisor continue
 0000013D  83 3D 0000015C R			cmp		factors, 1						;compare number of factors to 1
	   01
 00000144  7E C9				jle		prime							;jump if less or equal, if there are only 1 factor so far, continue checking if there are any more possible divisors
 00000146  7F AD				jg		new_Number						;jump if greater, if there are more than 1 divisor, move on to the next number
																; (please note that at this point we know that test numbe is still not equal to divisor, thats why we move on 
																;to the next number)
 00000148				Is_Primer:									;move a test number to the primer found 
 00000148  A1 00000158 R			mov		eax, test_Number				;move test number that was determined to be a prime number to the eax
 0000014D  A3 00000164 R			mov		Primer_Found, eax				;move eax, which has a value of newly found prime number to the primer_found variabel

 00000152  C3				ret								
 00000153			isPrime ENDP


				;--------------------------------------------------------------------------------------------------------------------------------------------------------
				;farewell PROC
				;procedure to write a farewell message to the user
				;receives: global goodbye, and globale goodbye2
				;returns: none
				;preconditions: none
				;registers changed: EDX
				;----------------------------------------------------------------------------------------------------------------------------------------------------------

 00000153			farewell PROC
 00000153  E8 00000000 E		call	CrLf
 00000158  E8 00000000 E		call	CrLf
 0000015D  BA 0000016C R		mov		edx, OFFSET goodbye
 00000162  E8 00000000 E		call	WriteString
 00000167  BA 00000039 R		mov		edx, OFFSET authorName
 0000016C  E8 00000000 E		call	WriteString
 00000171  BA 00000182 R		mov		edx, OFFSET goodbye2
 00000176  E8 00000000 E		call	WriteString

 0000017B  E8 00000000 E		call	CrLf
 00000180  E8 00000000 E		call	CrLf

 00000185  C3				ret

 00000186			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    11/09/14 21:09:54
%Prime Number Calculator					(AS4.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000018B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000186 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000153 _TEXT	Length= 00000033 Public STDCALL
getUserData  . . . . . . . . . .	P Near	 0000004E _TEXT	Length= 00000023 Public STDCALL
  numberInput  . . . . . . . . .	L Near	 0000004E _TEXT	
introduction . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 00000033 Public STDCALL
isPrime  . . . . . . . . . . . .	P Near	 000000F5 _TEXT	Length= 0000005E Public STDCALL
  new_Number . . . . . . . . . .	L Near	 000000F5 _TEXT	
  prime  . . . . . . . . . . . .	L Near	 0000010F _TEXT	
  do_Not_Add . . . . . . . . . .	L Near	 00000130 _TEXT	
  Is_Primer  . . . . . . . . . .	L Near	 00000148 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showPrimes . . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 00000044 Public STDCALL
  Primer_Loop  . . . . . . . . .	L Near	 000000BC _TEXT	
  newLine  . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  oldLine  . . . . . . . . . . .	L Near	 000000F2 _TEXT	
validateInput  . . . . . . . . .	P Near	 00000071 _TEXT	Length= 00000040 Public STDCALL
  invalid  . . . . . . . . . . .	L Near	 00000097 _TEXT	
  valid  . . . . . . . . . . . .	L Near	 000000B0 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AuthorName . . . . . . . . . . .	Byte	 00000039 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HIGH_LIMIT . . . . . . . . . . .	Number	 000000C8h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Introduction1  . . . . . . . . .	Byte	 0000004B _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOW_LIMIT  . . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Primer_Found . . . . . . . . . .	DWord	 00000164 _DATA	
ProgramName  . . . . . . . . . .	Byte	 00000000 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
divisor  . . . . . . . . . . . .	DWord	 00000160 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000119 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
factors  . . . . . . . . . . . .	DWord	 0000015C _DATA	
goodbye2 . . . . . . . . . . . .	Byte	 00000182 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 0000016C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nextLine . . . . . . . . . . . .	DWord	 00000168 _DATA	
number . . . . . . . . . . . . .	DWord	 00000150 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000E6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
test_Number  . . . . . . . . . .	DWord	 00000158 _DATA	
truth  . . . . . . . . . . . . .	DWord	 00000154 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors

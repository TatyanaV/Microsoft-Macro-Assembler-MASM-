Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/07/14 19:15:33
%Sorting Random Integers					(AS6.asm  Page 1 - 1


				TITLE Sorting Random Integers					(AS6.asm)
				;*******************************************************************************************************************************************
				; Author: Tatyana Vlaskin
				; Course: CS 271					 Date: 11.30.2014
				; Assignment: Program #6B
				; Description:  This program is a combination calculator. The program randomly generates n in the range [3...12]
				; and r in the range [1..n], displays those values to the user and ask the user to enter results for combination.
				; Result entered by the user is compared to the calculated result, which is calculated recursively using the following 
				;formula: n!/(r!(n-r)!). The program reports the correct value and lets the use know if they got it wrong or right.
				;The program repeats until the user decides to quit.
				;references: 
				;			 demo files provided on the blackboard
				;			 lectures
				;			 http://www.siliconkit.com/rebecca/help/masmpguide/Chap_07.htm
				;			 http://www.cs.stedwards.edu/~ewinnub/cosc2331/mysubs.asm
				;			 http://stackoverflow.com/questions/13657007/unhandled-exception-recursive-factorial-in-assembly-masm
				;			 http://codingforums.com/computer-programming/221061-masm-project-dont-know-what-im-doing-wrong.html
				;			 http://stackoverflow.com/questions/13666153/masm-convert-string-to-integer-processing-invalid-input
				;			 http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=9&ved=0CFUQFjAI&url=http%3A%2F%2Fdclab.cs.nthu.edu.tw%2F~course%2FAssembly%2Flecture%25207%2520%2528Chap.%25208%2529.ppt&ei=dpaDVIiYHsSqogSPloKICQ&usg=AFQjCNF0fa8gr3GQ-HU42uzeIXMVyuwLlw&bvm=bv.81449611,d.cGU
				;*******************************************************************************************************************************************

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;macro taken from lecture 26

				printString MACRO buffer
					push	edx
					mov		edx, OFFSET buffer
					call	WriteString
					pop		edx
				ENDM

 00000000			.data
 00000000 00000000		n						DWORD	?
 00000004 00000000		r						DWORD	?
 00000008 00000000		answer					DWORD	?
 0000000C 00000000		result					DWORD	?
 00000010  0000000A [		input					BYTE	10 DUP(0)
	    00
	   ]
 0000001A 41 6E 6F 74 68	another					BYTE	"Another problem? (y/n): ", 0
	   65 72 20 70 72
	   6F 62 6C 65 6D
	   3F 20 28 79 2F
	   6E 29 3A 20 00
 00000033 49 6E 76 61 6C	error					BYTE	"Invalid response. ", 0
	   69 64 20 72 65
	   73 70 6F 6E 73
	   65 2E 20 00
 00000046 4F 4B 2E 2E 2E	goodbye					BYTE	"OK.........Goodbye!", 0
	   2E 2E 2E 2E 2E
	   2E 47 6F 6F 64
	   62 79 65 21 00
 0000005A 00000000		aReg					DWORD	?
 0000005E 00000000		bReg					DWORD	?
 00000062 00000000		cReg					DWORD	?
 00000066 00			alReg					BYTE	?
 00000067 00000000		dReg					DWORD	?

				;constants
 = 00000003			MIN_N = 3
 = 0000000C			MAX_N = 12
 = 0000000A			RANGE = MAX_N-MIN_N+1
 = 00000001			MIN_R = 1

 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		call				Randomize				;sets the randomizer seed
 00000005  E8 000000B6			call				introduction
 0000000A			again:
																
 0000000A  E8 00000000 E		call				CrLf					;shows the problem to the user
 0000000F  68 00000004 R		push				OFFSET r				;[ebp+12], in reality we are working with esp, but contents of esp will be coppied to ebp and we'll we working with ebp'
 00000014  68 00000000 R		push				OFFSET n				;[ebp+8]
 00000019  E8 000000DD			call				showProblem				;[ebp+4]
																
 0000001E  E8 00000000 E		call				CrLf					;gets user data
 00000023  68 00000010 R		push				OFFSET input			;[ebp+12]
 00000028  68 00000008 R		push				OFFSET answer			;[ebp+8]
 0000002D  E8 0000015D			call				getData					;[ebp+4]
																
 00000032  FF 35 00000000 R		push				n						;calculate combination [ebp+16]
 00000038  FF 35 00000004 R		push				r						;[ebp+12]
 0000003E  68 0000000C R		push				OFFSET result			;[ebp+8]
 00000043  E8 000001E0			call				combinations			;ebp+4
																
 00000048  FF 35 00000000 R		push				n						;shows results [ebp+20]
 0000004E  FF 35 00000004 R		push				r						;[ebp+16]
 00000054  FF 35 0000000C R		push				result					;[ebp+12]
 0000005A  FF 35 00000008 R		push				answer					;[ebp+8]
 00000060  E8 00000252			call				showResults				;[ebp+4]

 00000065			question:										;ask the user if they want to go another round									
 00000065  E8 00000000 E		call				CrLf					;blank line
					printString			another
 0000006A  52		     1		push	edx
 0000006B  BA 0000001A R     1		mov		edx, OFFSET another
 00000070  E8 00000000 E     1		call	WriteString
 00000075  5A		     1		pop		edx
 00000076  E8 00000000 E		call				ReadChar				;entry is read and stored in the AL
 0000007B  3C 79			cmp					al, 121					; 'y' character 
 0000007D  74 8B			je					again
 0000007F  3C 59			cmp					al, 89					; 'Y' character 
 00000081  74 87			je					again					;if not equal
 00000083  3C 6E			cmp					al, 110					; 'n' character
 00000085  74 17			je					farewell
 00000087  3C 4E			cmp					al, 78					; 'N' character
 00000089  74 13			je					farewell

					printString			error					;let the user know if the entry is invalid
 0000008B  52		     1		push	edx
 0000008C  BA 00000033 R     1		mov		edx, OFFSET error
 00000091  E8 00000000 E     1		call	WriteString
 00000096  5A		     1		pop		edx
 00000097  E8 00000000 E		call				CrLf	
 0000009C  EB C7			jmp					question				;repets the question

 0000009E			farewell:
 0000009E  E8 00000000 E		call				CrLf	
 000000A3  E8 00000000 E		call				CrLf	
					printString			goodbye
 000000A8  52		     1		push	edx
 000000A9  BA 00000046 R     1		mov		edx, OFFSET goodbye
 000000AE  E8 00000000 E     1		call	WriteString
 000000B3  5A		     1		pop		edx
 000000B4  E8 00000000 E		call				CrLf

				exit
 000000B9  6A 00	   *	    push   +000000000h
 000000BB  E8 00000000 E   *	    call   ExitProcess
 000000C0			main ENDP


				;-----------------------------------------------------------------------------------------------------------------------------------
				; introduction PROC 
				; Displays an introduction for the program, programmer and instructions for use
				; Receives: Nothing
				; Returns: Nothing
				; preconditions: none
				; registers changed: edx -see macro
				;-----------------------------------------------------------------------------------------------------------------------------------------------------

 000000C0			introduction PROC

 0000006B			.data

 0000006B 57 65 6C 63 6F	ProgramName		    BYTE	"Welcome to the Assignment 6B: Combinations Calculator ", 0				
	   6D 65 20 74 6F
	   20 74 68 65 20
	   41 73 73 69 67
	   6E 6D 65 6E 74
	   20 36 42 3A 20
	   43 6F 6D 62 69
	   6E 61 74 69 6F
	   6E 73 20 43 61
	   6C 63 75 6C 61
	   74 6F 72 20 00
 000000A2 54 61 74 79 61	AuthorName			BYTE	"Tatyana Vlaskin. ", 0
	   6E 61 20 56 6C
	   61 73 6B 69 6E
	   2E 20 00
 000000B4 49 27 6C 6C 20	Introduction1		BYTE	"I'll give you a combination problem. You enter your " 
	   67 69 76 65 20
	   79 6F 75 20 61
	   20 63 6F 6D 62
	   69 6E 61 74 69
	   6F 6E 20 70 72
	   6F 62 6C 65 6D
	   2E 20 59 6F 75
	   20 65 6E 74 65
	   72 20 79 6F 75
	   72 20
 000000E8  61 6E 73 77 65						BYTE	"answer",10, "and I'll let you know if you are right.",0
	   72 0A 61 6E 64
	   20 49 27 6C 6C
	   20 6C 65 74 20
	   79 6F 75 20 6B
	   6E 6F 77 20 69
	   66 20 79 6F 75
	   20 61 72 65 20
	   72 69 67 68 74
	   2E 00

 000000C0			.code
 000000C0  60				pushad								;save registers	
					printString		ProgramName			;prints program name
 000000C1  52		     1		push	edx
 000000C2  BA 0000006B R     1		mov		edx, OFFSET ProgramName
 000000C7  E8 00000000 E     1		call	WriteString
 000000CC  5A		     1		pop		edx
 000000CD  E8 00000000 E		call			CrLf
					printString		AuthorName			;prints program author
 000000D2  52		     1		push	edx
 000000D3  BA 000000A2 R     1		mov		edx, OFFSET AuthorName
 000000D8  E8 00000000 E     1		call	WriteString
 000000DD  5A		     1		pop		edx
 000000DE  E8 00000000 E		call			CrLf
 000000E3  E8 00000000 E		call			CrLf
					printString		Introduction1 		;prints user instructions
 000000E8  52		     1		push	edx
 000000E9  BA 000000B4 R     1		mov		edx, OFFSET Introduction1
 000000EE  E8 00000000 E     1		call	WriteString
 000000F3  5A		     1		pop		edx
 000000F4  E8 00000000 E		call			CrLf
 000000F9  61				popad								;restore registers

 000000FA  C3				ret

 000000FB			introduction ENDP



				;----------------------------------------------------------------------------------------------------------------------------------------
				; showProblem PROC
				; Procedure that generades the random numbers and displays the problem
				; Receives: addresses of r and n
				; Returns: values for r and n
				; preconditions: none
				; registers changed: EAX, ebx,ecx,
				; 
				;-----------------------------------------------------------------------------------------------------------------------------------------
				;procedure to generate the problem and show to the user
				;parameters: n, r (by reference)
 000000FB			showProblem PROC
 00000117			.data

 00000117 50 72 6F 62 6C	problem				BYTE "Problem: ", 0
	   65 6D 3A 20 00
 00000121 4E 75 6D 62 65	Number_in_Set		BYTE "Number of elements in the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 00
 00000141 4E 75 6D 62 65	Choose_from_Set		BYTE "Number of elements to choose from the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 00

 000000FB			.code

					;save all registerS
 000000FB  A3 0000005A R		mov		aReg, eax					
 00000100  89 1D 0000005E R		mov		bReg, ebx					
 00000106  89 0D 00000062 R		mov		cReg ,ecx			
 0000010C  55				push	ebp
 0000010D  8B EC			mov		ebp, esp

 0000010F  8B 5D 08			mov		ebx, [ebp+8]					;address of n
 00000112  8B 4D 0C			mov		ecx, [ebp+12]					;address of r

					;calculate n
 00000115  B8 0000000A			mov		eax, RANGE						;n is in the range [3..12]. per lecture 20, we need to put range into the eax. Range = hi-low +1
 0000011A  E8 00000000 E		call	RandomRange						;calculate pseudorandom number. results are in the eax in the range of [0 .....range-1]
 0000011F  83 C0 03			add		eax, MIN_N						; to get a number in the range [low...hi], we need to add low to the eax
 00000122  89 03			mov		[ebx], eax				
					
					;calculate r							;r needs to be in the range [1..n]. n is the value that was randomly generated above
 00000124  8B 03			mov		eax, [ebx]						;the next 6 lines of code are taken from the Quiz 3 ;n, which is max for r is moved in the eax
 00000126  83 E8 01			sub		eax, MIN_R						;we are trying to calculate range using the following formulat: RANGE_R = MAX_R - MIN_R + 1	
 00000129  40				inc		eax								;RANGE_R = MAX_R - MIN_R + 1	
 0000012A  E8 00000000 E		call	RandomRange
 0000012F  83 C0 01			add		eax, MIN_R						; to get a number in the range [low...hi], we need to add low to the eax
 00000132  89 01			mov		[ecx], eax						;R WILL BE STORED IN THE ECX


					;prints problem statement
 00000134  E8 00000000 E		call			CrLf
					printString		problem
 00000139  52		     1		push	edx
 0000013A  BA 00000117 R     1		mov		edx, OFFSET problem
 0000013F  E8 00000000 E     1		call	WriteString
 00000144  5A		     1		pop		edx
 00000145  E8 00000000 E		call			CrLf
					printString		Number_in_Set
 0000014A  52		     1		push	edx
 0000014B  BA 00000121 R     1		mov		edx, OFFSET Number_in_Set
 00000150  E8 00000000 E     1		call	WriteString
 00000155  5A		     1		pop		edx
 00000156  8B 03			mov				eax, [ebx]						;n is prepared to be written on the screen
 00000158  E8 00000000 E		call			WriteDec						;n is displayed
 0000015D  E8 00000000 E		call			CrLf
					printString		Choose_from_Set	
 00000162  52		     1		push	edx
 00000163  BA 00000141 R     1		mov		edx, OFFSET Choose_from_Set
 00000168  E8 00000000 E     1		call	WriteString
 0000016D  5A		     1		pop		edx
 0000016E  8B 01			mov				eax, [ecx]						;r is preparied to be written on the screen
 00000170  E8 00000000 E		call			WriteDec						; r is displayed on the screen
 00000175  E8 00000000 E		call			CrLf

					;restores registers		
 0000017A  A1 0000005A R		mov			eax, aReg					
 0000017F  8B 1D 0000005E R		mov			ebx, bReg				
 00000185  8B 0D 00000062 R		mov			ecx, cReg 
 0000018B  5D				pop				ebp
 0000018C  C2 0008			ret				8								;12 bytes are removed from the stack


 0000018F			showProblem ENDP


				;-------------------------------------------------------------------------------------------------------------------------------------------------
				;getData PROC
				;Procedure to prompt/get the user's answer
				;receives: string entered by the user
				;returns: true(1) is string contains only number characters (base 10)
				;and the answer is soted in the stack
				;returns: false(0) is there are non intergers in the string and the user
				; is asked to reenter the number
				;preconditions: none
				;registers changed: EDX, al,ecx,eax
				; Algorithm of converstion of the ASII string into an interger
				; 1. Start at the beginning of the string
				; 2. Multiply the value of answer by 10.
				; 3. Split each character off the string and subtract by 48d to get the integer. 
				;		Ex. student enters 156. 49 is stored as the first char in the variable temp. Subtract 48 from 49. The integer is 1.
				; 4. Add integer to value of answer.
				; 5. Inc esi (move one character right).
				; 6. Loop
				;--------------------------------------------------------------------------------------------------------------------------------------------------

 0000018F			getData PROC
 0000016D			.data
				;input
 0000016D 48 6F 77 20 6D	prompt		 BYTE "How many ways can you choose? ", 0
	   61 6E 79 20 77
	   61 79 73 20 63
	   61 6E 20 79 6F
	   75 20 63 68 6F
	   6F 73 65 3F 20
	   00
 0000018C 49 6E 76 61 6C	invalid		 BYTE "Invalid response. The entry you made is not an integer!", 0
	   69 64 20 72 65
	   73 70 6F 6E 73
	   65 2E 20 54 68
	   65 20 65 6E 74
	   72 79 20 79 6F
	   75 20 6D 61 64
	   65 20 69 73 20
	   6E 6F 74 20 61
	   6E 20 69 6E 74
	   65 67 65 72 21
	   00
 0000018F			.code
					;save all registerS
 0000018F  A3 0000005A R		mov		aReg, eax					
 00000194  89 0D 00000062 R		mov		cReg, ecx
 0000019A  89 15 00000067 R		mov		dReg, edx
 000001A0  A2 00000066 R		mov		alReg, al					
 000001A5  55				push	ebp
 000001A6  8B EC			mov		ebp, esp
 000001A8			start:
					printString prompt
 000001A8  52		     1		push	edx
 000001A9  BA 0000016D R     1		mov		edx, OFFSET prompt
 000001AE  E8 00000000 E     1		call	WriteString
 000001B3  5A		     1		pop		edx
 000001B4  8B 55 0C			mov		edx, [ebp+12]			;Before calling ReadString, EDX should contain the address of
													;the array of bytes where the input characters should be stored

 000001B7  B9 0000000A			mov		ecx, 10					;ECX  should contain the maximum number of bytes to be read plus one extra byte
 000001BC  E8 00000000 E		call	ReadString
 000001C1  8B C8			mov		ecx,eax					;actual number of bytes read in the EAX register. 
													;the length of the string is moved to the ecx

 000001C3  8B 75 0C			mov		esi, [ebp+12]			;string is moved to the esi
 000001C6  BA 00000000			mov		edx, 0					; at the beggining we have 0 in this register, we will
													;checks input string for non-integer input
 000001CB			loop1:
 000001CB  8A 06			mov		al, [esi]				;gets character of the string
 000001CD  3C 39			cmp		al, 57					; checks if the enrry is larger thatn 9. '9' is character 57
 000001CF  77 20			ja		invalid2
 000001D1  3C 30			cmp		al, 48					; checks if the entery is less than 0. '0' is character 48
 000001D3  72 1C			jb		invalid2
 000001D5  0F B6 C0			movzx	eax, al					;instruction is used to coppy into a larger register
 000001D8  51				push	ecx						;ecx is pushed on stack				
 000001D9  8B C8			mov		ecx, eax				;contents of the eax is moved to ecx	
													;eax has newly validated character
 000001DB  BB 0000000A			mov		ebx, 10					;ebx is set to 10
 000001E0  8B C2			mov		eax, edx				; number from teh edx, which holds validated integers
 000001E2  F7 E3			mul		ebx						;validated # is multipliped by 10					
 000001E4  8B D0			mov		edx, eax				; number from teh eax, which holds validated integers x10 is placed back into edx
 000001E6  83 E9 30			sub		ecx, 48					;48 is subtracted from the ecx that hold newly validated ASII character to get an integer
 000001E9  03 D1			add		edx, ecx				;newly validated number is added to the previous validate*10 numbers
 000001EB  59				pop		ecx						; ecx is removed from the stack
 000001EC  46				inc		esi						;increment esi to go to the next character
 000001ED  E2 DC			loop	loop1					; while loop counter is not 0, go to the begining of the loop to validate that result
 000001EF  EB 13			jmp		quit					
 000001F1			invalid2:
					printString		invalid
 000001F1  52		     1		push	edx
 000001F2  BA 0000018C R     1		mov		edx, OFFSET invalid
 000001F7  E8 00000000 E     1		call	WriteString
 000001FC  5A		     1		pop		edx
 000001FD  E8 00000000 E		call			CrLf
 00000202  EB A4			jmp				start
 00000204			quit:
 00000204  8B 5D 08			mov				ebx, [ebp+8]	;address of answer will be stored in the ebx
 00000207  89 13			mov				[ebx], edx		;user input is pla into answer
 00000209  E8 00000000 E		call			CrLf
					;restores registers
 0000020E  A1 0000005A R		mov				eax, aReg				
 00000213  8B 0D 00000062 R		mov				ecx, cReg
 00000219  8B 15 00000067 R		mov				edx, dReg
 0000021F  A0 00000066 R		mov				al, alReg	
 00000224  5D				pop				ebp
 00000225  C2 0008			ret				8
 00000228			getData ENDP


				;-------------------------------------------------------------------------------------------------------------------------------------------------
				;combinations PROC
				;description:
				;	1. calls factorial (3 times) to calculate n!, r!, and (n-r)!.
				;	2. calculates n!/(r!(n-r)!) , and stores the value in result.
				;parameters: n,r (by value), result (by reference)
				;receives: receives:  accepts n and r by value and result by address.
				;returns: combination calculations
				;preconditions: none
				;registers changed: eax, ebx, edx,ecx
				;--------------------------------------------------------------------------------------------------------------------------------------------------
 00000228			combinations PROC

					;save all registerS
 00000228  A3 0000005A R		mov		aReg, eax					
 0000022D  89 1D 0000005E R		mov		bReg, ebx					
 00000233  89 0D 00000062 R		mov		cReg ,ecx	
 00000239  89 15 00000067 R		mov		dReg, edx	
 0000023F  55				push	ebp
 00000240  8B EC			mov		ebp, esp
 00000242  8B 45 10			mov		eax, [ebp+16]				 ;value of n
 00000245  8B 5D 0C			mov		ebx, [ebp+12]				 ;value of r
					
					; (n-r)! calcualtions
 00000248  8B 45 10			mov		eax, [ebp+16]				;value of n
 0000024B  2B 45 0C			sub		eax, [ebp+12]				;value of r  is subtracted from n  ;(n-r)
 0000024E  8B D8			mov		ebx, eax					;result of the subtraction is moved to the ebx
 00000250  53				push	ebx							;ebx is pushed on the stack
 00000251  E8 0000003F			call	factorial					;factorial of (n-r), the value is stored in the EAX register
 00000256  8B C8			mov		ecx, eax					;result of (n-r)! is moved from the EAX to ECX
					
					;calculates r!
 00000258  8B 5D 0C			mov		ebx, [ebp+12]				;calculates r!
 0000025B  53				push	ebx
 0000025C  E8 00000034			call	factorial					;calculate r! the value will be stored in the EAX register
 00000261  F7 E1			mul		ecx							; ecx is multiplied by eax. EAX= r! and ECX = (n-r)!
 00000263  8B C8			mov		ecx, eax					;result of r! * (n-r)! in ecx
					
					; n! calculations
 00000265  8B 5D 10			mov		ebx, [ebp+16]
 00000268  53				push	ebx
 00000269  E8 00000027			call	factorial					;result of n! are stored in the EAX
					
					;n!/(r!*(n-r)!) calculations
 0000026E  BA 00000000			mov		edx, 0						;edx will stored remainder of the division
 00000273  F7 F1			div		ecx							;eax is divided by ecx. EAX = n! and ECX = r! * (n-r)! . r. result if stored in the EAX
 00000275  8B 4D 08			mov		ecx, [ebp+8]				;address of result
 00000278  89 01			mov		[ecx], eax					; r! * (n-r)!  from eax to [ecx]

					;restores registers		
 0000027A  A1 0000005A R		mov		eax, aReg					
 0000027F  8B 1D 0000005E R		mov		ebx, bReg				
 00000285  8B 0D 00000062 R		mov		ecx, cReg
 0000028B  8B 15 00000067 R		mov		edx, dReg
 00000291  5D				pop		ebp
 00000292  C2 000C			ret		12							;remove 14 bytes from the stack

 00000295			combinations ENDP


				;-------------------------------------------------------------------------------------------------------------------------------------------------
				;factorial PROC
				;procedure to calculate the factorial of a number
				;parameters: ebx (by value)
				;receives: string entered by the user
				;returns: factorial solutions in the EAX
				;preconditions: none
				;registers changed: EAX
				;--------------------------------------------------------------------------------------------------------------------------------------------------

 00000295			factorial PROC

 00000295  55				push	ebp
 00000296  8B EC			mov		ebp, esp
 00000298  8B 45 08			mov		eax, [ebp+8]				;address of result
 0000029B  83 F8 00			cmp		eax, 0
 0000029E  77 07			ja		L1
 000002A0  B8 00000001			mov		eax, 1						
 000002A5  EB 0C			jmp		quit						;jump if less or equal
					
 000002A7  48			L1:	dec		eax							; if eax is not equal to 1, keep recursing
 000002A8  50				push	eax							;factorial (number-1)
 000002A9  E8 FFFFFFE7			call	factorial

 000002AE  8B 75 08			mov		esi, [ebp+8]				;get result
 000002B1  F7 E6			mul		esi							;esi = aex * esi
 000002B3			quit:
 000002B3  5D				pop		ebp							;return eax
 000002B4  C2 0004			ret		4							;removes 8 bytes from teh stack
 000002B7			factorial ENDP


				;-------------------------------------------------------------------------------------------------------------------------------------------------
				;showResults PROC
				;procedure to show the results of the problem
				;parameters: n, r, result, answer (by value)
				;receives: string entered by the user
				;returns: factorial solutions in the EAX
				;preconditions: none
				;registers changed: EAX, ecx, edx, 
				;--------------------------------------------------------------------------------------------------------------------------------------------------

 000002B7			showResults PROC
 000001C4			.data
				;output
 000001C4 54 68 65 72 65	result1				BYTE "There are ", 0
	   20 61 72 65 20
	   00
 000001CF 20 63 6F 6D 62	result2				BYTE " combinations of ", 0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 000001E1 20 69 74 65 6D	result3				BYTE " items from a set of ", 0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 000001F7 2E 00			result4				BYTE ".", 0
 000001F9 59 6F 75 20 6E	wrong				BYTE "You need more practice.", 0
	   65 65 64 20 6D
	   6F 72 65 20 70
	   72 61 63 74 69
	   63 65 2E 00
 00000211 59 6F 75 20 61	correct				BYTE "You are correct!", 0
	   72 65 20 63 6F
	   72 72 65 63 74
	   21 00

 000002B7			.code
					;save all registerS
 000002B7  A3 0000005A R		mov				aReg, eax					
 000002BC  89 1D 0000005E R		mov				bReg, ebx					
 000002C2  89 0D 00000062 R		mov				cReg ,ecx	
 000002C8  89 15 00000067 R		mov				dReg, edx	
 000002CE  55				push			ebp
 000002CF  8B EC			mov				ebp, esp
 000002D1  8B 75 14			mov				esi, [ebp+20]		;value of n
 000002D4  8B 5D 10			mov				ebx, [ebp+16]		;value of r
 000002D7  8B 4D 0C			mov				ecx, [ebp+12]		;value of result
 000002DA  8B 55 08			mov				edx, [ebp+8]		;value of answer

					printString		result1				;displays the problem and answer
 000002DD  52		     1		push	edx
 000002DE  BA 000001C4 R     1		mov		edx, OFFSET result1
 000002E3  E8 00000000 E     1		call	WriteString
 000002E8  5A		     1		pop		edx
 000002E9  8B C1			mov				eax, ecx			;value of correct result 
 000002EB  E8 00000000 E		call			WriteDec			;is displayed

					printString		result2
 000002F0  52		     1		push	edx
 000002F1  BA 000001CF R     1		mov		edx, OFFSET result2
 000002F6  E8 00000000 E     1		call	WriteString
 000002FB  5A		     1		pop		edx
 000002FC  8B C3			mov				eax, ebx			;value of r is displayed
 000002FE  E8 00000000 E		call			WriteDec

					printString		result3
 00000303  52		     1		push	edx
 00000304  BA 000001E1 R     1		mov		edx, OFFSET result3
 00000309  E8 00000000 E     1		call	WriteString
 0000030E  5A		     1		pop		edx
 0000030F  8B C6			mov				eax, esi			;value of n is displayed
 00000311  E8 00000000 E		call			WriteDec

					printString	 result4
 00000316  52		     1		push	edx
 00000317  BA 000001F7 R     1		mov		edx, OFFSET result4
 0000031C  E8 00000000 E     1		call	WriteString
 00000321  5A		     1		pop		edx
 00000322  E8 00000000 E		call			 CrLf
 00000327  3B CA			cmp				ecx, edx			;eneterd value is compared to the value of the correct results
 00000329  74 13			je				right				;jump if equal
					printString		wrong				; if the answer that was entered is not correct, display the message
 0000032B  52		     1		push	edx
 0000032C  BA 000001F9 R     1		mov		edx, OFFSET wrong
 00000331  E8 00000000 E     1		call	WriteString
 00000336  5A		     1		pop		edx
 00000337  E8 00000000 E		call			 CrLf
 0000033C  EB 0C			jmp				quit
 0000033E			right:									;if the answer is correct
					printString    correct
 0000033E  52		     1		push	edx
 0000033F  BA 00000211 R     1		mov		edx, OFFSET correct
 00000344  E8 00000000 E     1		call	WriteString
 00000349  5A		     1		pop		edx
 0000034A			quit:
 0000034A  E8 00000000 E		call			CrLf
 0000034F  E8 00000000 E		call			CrLf
					;restores registers		
 00000354  A1 0000005A R		mov				eax, aReg					
 00000359  8B 1D 0000005E R		mov				ebx, bReg				
 0000035F  8B 0D 00000062 R		mov				ecx, cReg
 00000365  8B 15 00000067 R		mov				edx, dReg
 0000036B  5D				pop				ebp
 0000036C  C2 0010			ret				16

 0000036F			showResults ENDP

				END main



Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/07/14 19:15:33
%Sorting Random Integers					(AS6.asm  Symbols 2 - 1




Macros:

                N a m e                 Type

printString  . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000222 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000036F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
combinations . . . . . . . . . .	P Near	 00000228 _TEXT	Length= 0000006D Public STDCALL
factorial  . . . . . . . . . . .	P Near	 00000295 _TEXT	Length= 00000022 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002A7 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000002B3 _TEXT	
getData  . . . . . . . . . . . .	P Near	 0000018F _TEXT	Length= 00000099 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 000001A8 _TEXT	
  loop1  . . . . . . . . . . . .	L Near	 000001CB _TEXT	
  invalid2 . . . . . . . . . . .	L Near	 000001F1 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000204 _TEXT	
introduction . . . . . . . . . .	P Near	 000000C0 _TEXT	Length= 0000003B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C0 Public STDCALL
  again  . . . . . . . . . . . .	L Near	 0000000A _TEXT	
  question . . . . . . . . . . .	L Near	 00000065 _TEXT	
  farewell . . . . . . . . . . .	L Near	 0000009E _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showProblem  . . . . . . . . . .	P Near	 000000FB _TEXT	Length= 00000094 Public STDCALL
showResults  . . . . . . . . . .	P Near	 000002B7 _TEXT	Length= 000000B8 Public STDCALL
  right  . . . . . . . . . . . .	L Near	 0000033E _TEXT	
  quit . . . . . . . . . . . . .	L Near	 0000034A _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AuthorName . . . . . . . . . . .	Byte	 000000A2 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
Choose_from_Set  . . . . . . . .	Byte	 00000141 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
Introduction1  . . . . . . . . .	Byte	 000000B4 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_N  . . . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_N  . . . . . . . . . . . . .	Number	 00000003h   
MIN_R  . . . . . . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
Number_in_Set  . . . . . . . . .	Byte	 00000121 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ProgramName  . . . . . . . . . .	Byte	 0000006B _DATA	
RANGE  . . . . . . . . . . . . .	Number	 0000000Ah   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aReg . . . . . . . . . . . . . .	DWord	 0000005A _DATA	
alReg  . . . . . . . . . . . . .	Byte	 00000066 _DATA	
another  . . . . . . . . . . . .	Byte	 0000001A _DATA	
answer . . . . . . . . . . . . .	DWord	 00000008 _DATA	
bReg . . . . . . . . . . . . . .	DWord	 0000005E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cReg . . . . . . . . . . . . . .	DWord	 00000062 _DATA	
correct  . . . . . . . . . . . .	Byte	 00000211 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dReg . . . . . . . . . . . . . .	DWord	 00000067 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000033 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000046 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input  . . . . . . . . . . . . .	Byte	 00000010 _DATA	
invalid  . . . . . . . . . . . .	Byte	 0000018C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
n  . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
problem  . . . . . . . . . . . .	Byte	 00000117 _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000016D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result1  . . . . . . . . . . . .	Byte	 000001C4 _DATA	
result2  . . . . . . . . . . . .	Byte	 000001CF _DATA	
result3  . . . . . . . . . . . .	Byte	 000001E1 _DATA	
result4  . . . . . . . . . . . .	Byte	 000001F7 _DATA	
result . . . . . . . . . . . . .	DWord	 0000000C _DATA	
r  . . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrong  . . . . . . . . . . . . .	Byte	 000001F9 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
